1.->


Approach 1: Hash Table

We can use the hash table m to store the array value and the corresponding subscript.

Traverse the array nums, when you find target - nums[i] in the hash table, it means that the target value is found, and the index of target - nums[i] and i are returned.

The time complexity is O(n) and the space complexity is O(n). Where n is the length of the array nums.
 
 Code in Python -> 
 
 class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        m = {}
        for i, x in enumerate(nums):
            y = target - x
            if y in m:
                return [m[y], i]
            m[x] = i
			
			
----------------------

2.->


Approach 1: One Pass

We use the variable k to record the number of elements that are not equal to val.

Traverse the array nums, if the current element x is not equal to val, then assign x to nums[k], and increment k by 1.

Finally, return k.

The time complexity is O(n) and the space complexity is O(1), where n is the length of the array nums.

Code in Python ->
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        k = 0
        for x in nums:
            if x != val:
                nums[k] = x
                k += 1
        return k
		

------------------------------
		
3.->

Binary search.

Code in Python ->
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)
        while left < right:
            mid = (left + right) >> 1
            if nums[mid] >= target:
                right = mid
            else:
                left = mid + 1
        return left
		
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        return bisect_left(nums, target)

----------------------		
		
4.->

Code in Python ->
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        n = len(digits)
        for i in range(n - 1, -1, -1):
            digits[i] += 1
            digits[i] %= 10
            if digits[i] != 0:
                return digits
        return [1] + digits
	

-----------------

5.->

Approach 1: Two Pointers

We use two pointers i and j pointing to the end of two arrays, and a pointer k pointing to the end of the merged array.

Every time we compare the two elements at the end of the two arrays, and move the larger one to the end of the merged array. Then we move the pointer one step forward, and repeat this process until the two pointers reach the start of the arrays.

The time complexity is O(m+n), where m and n are the lengths of two arrays. The space complexity is O(1).

Code in Python ->
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        k = m + n - 1
        i, j = m - 1, n - 1
        while j >= 0:
            if i >= 0 and nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1
			
			
-------------------

6.->

Code in Python ->
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return any(a == b for a, b in pairwise(sorted(nums)))
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return len(set(nums)) < len(nums)
		
		
---------------------------

7.->

Code in Python ->
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        left, n = 0, len(nums)
        for right in range(n):
            if nums[right] != 0:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
				
				
----------------------
				
8.->

Code in Python ->
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        eor, n = 0, len(nums)
        for i in range(1, n + 1):
            eor ^= i ^ nums[i - 1]
        diff = eor & (~eor + 1)
        a = 0
        for i in range(1, n + 1):
            if (nums[i - 1] & diff) == 0:
                a ^= nums[i - 1]
            if (i & diff) == 0:
                a ^= i
        b = eor ^ a
        for num in nums:
            if a == num:
                return [a, b]
        return [b, a]	
