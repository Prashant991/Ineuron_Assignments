Q26. What is a string? How can we declare string in Python?
Strings are Kind of arrays which are declared in single doubleor tripple quotes. Ex -> a = 'Prashant Goel'

Q27. How can we access the string using its index?
By specifying the index number in square brackets. Ex -> print(a[1]) ----> This will give output 'r'

Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "iNeuron"

print(string[-7:])

Q29. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"

print(string[:-8:-1])

Q30. Resverse the string given in the above question.
print(string[::-1])

Q31. How can you delete entire string at once?
Using del keyword. Ex -> del string

Q32. What is escape sequence?
An escape sequence is a sequence of characters that, when used inside a character or string, does not represent itself but is converted into another character or series of characters.  Ex-> print('Who's this?') will give syntax error so we can use --> print('Who\'s this?')

Q33. How can you print the below string?

'iNeuron's Big Data Course'

print('iNeuron\'s Big Data Course')

Q34. What is a list in Python?
Lists are used to store multiple items in a single variable. 

Q35. How can you create a list in Python?
These are created using square brackets. 
Ex -> list1 = ["Prashant","Shashank","Vishal"]
list2 = [1,2,3]

Q36. How can we access the elements in a list?
We can access them by referring to the index number.
Ex -> print(list1[1])

Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])

Q38. Take a list as an input from the user and find the length of the list.
lst = []
n = int(input("Enter number of elements : "))
for i in range(0, n):
    ele = int(input())
    lst.append(ele)
print(len(lst))

Q39. Add the word "Big" in the 3rd index of the given list.

lst = ["Welcome", "to", "Data", "course"]
lst.insert(2,"Big")

Q40. What is a tuple? How is it different from list?
Tuples are also used to store multiple items in a single variable but it is not mutable wheras lists are mutable.

Q41. How can you create a tuple in Python?
Tuples are written with round brackets.
Ex-> tpl = ("Prashant","Shashank","Vishal")

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
Not possible since it is a property of tuple that it is not mutable.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
Yes. ex-> 
tp1=(1,2) 
tp2=(3,4)
tp3=tp1+tp2

Q44. Take a tuple as an input and print the count of elements in it.
tpl4 = tuple(input("Enter : ").split())
leng = len(tpl4)
print(leng)

Q45. What are sets in Python?
A set is a collection which is unordered, unchangeable*, and unindexed.

Q46. How can you create a set?
Sets are written with curly brackets.
set1 = {"Prashant","Shashank","Vishal"}

Q47. Create a set and add "iNeuron" in your set.
set1.add("iNeuron")

Q48. Try to add multiple values using add() function.
Gave error.

Q49. How is update() different from add()?
To add items from another set into the current set, we use the update() method.

Q50. What is clear() in sets?
The clear() method empties the set.

Q51. What is frozen set?
It creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.

Q52. How is frozen set different from set?
Set is mutable and hashable whereas Frozenset is not.And there are very limited functions we can use with frozenset.

Q53. What is union() in sets? Explain via code.
Union of two given sets is the set which contains all the elements of both the sets.
Ex -> 
A = {2, 4, 5, 6}
B = {4, 6, 7, 8}
print("A U B:", A.union(B))

Q54. What is intersection() in sets? Explain via code.
The intersection of two given sets is the largest set, which contains all the elements that are common to both sets.
Ex->
s1 = {1, 2, 3}
s2 = {2, 3}
print(s1.intersection(s2))

Q55. What is dictionary ibn Python?
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered, changeable and do not allow duplicates.
Dictionaries are written with curly brackets.

Q56. How is dictionary different from all other data structures.
It stores values in key:value pairs which no other data structure in python does.

Q57. How can we delare a dictionary in Python?
We can create a dictionary using the dict() function.

Q58. What will the output of the following?
var = {}
print(type(var))

class 'dict'

Q59. How can we add an element in a dictionary?
tdict["car"] = "Aventador"
This will add key as car and its value as Urus in an existing dictionary 'dict'.

Q60. Create a dictionary and access all the values in that dictionary.
dict1 = {
  "brand": "Lamborghini",
  "model": "Urus",
  "year": 2020
}
print(dict1)

Q61. Create a nested dictionary and access all the element in the inner dictionary.
dict1 = {
  "brand": "Lamborghini",
  "model": "Urus",
  "year": 2020,
  "dict2" : {"Name":"Prashant","age":23}
}

print(dict1["dict2"])


Q62. What is the use of get() function?
The get() method returns the value of the item with the specified key.

Q63. What is the use of items() function?
The items() method returns a view object. The view object contains the key-value pairs of the dictionary, as tuples in a list.
The view object will reflect any changes done to the dictionary.

Q64. What is the use of pop() function?
The pop() method removes the item with the specified key name.

Q65. What is the use of popitems() function?
The popitem() method removes the last inserted item.

Q66. What is the use of keys() function?
The keys() method will return a list of all the keys in the dictionary.

Q67. What is the use of values() function?
The values() method will return a list of all the values in the dictionary.

Q68. What are loops in Python?
Loop statements allows us to execute a statement or group of statements multiple times.

Q69. How many type of loop are there in Python?
for loop and while loop

Q70. What is the difference between for and while loops?
For loop allows a programmer to execute a sequence of statements several times, it abbreviates the code which helps to manage loop variables.
While loop allows a programmer to repeat a single statement or a group of statements for the TRUE condition. It verifies the condition before executing the loop.

Q71. What is the use of continue statement?
The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.

Q72. What is the use of break statement?
'Break' in Python is a loop control statement. It is used to control the sequence of the loop. Suppose we want to terminate a loop and skip to the next code after the loop, break will help us do that.

Q73. What is the use of pass statement?
The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but we avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

Q74. What is the use of range() function?
The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.
Syntax -> range(start, stop, step)

Q75. How can you loop over a dictionary?
In Python, we can loop over a dictionary using a for loop. There are several ways to do this, but the most common approaches are:
Looping over keys: This method uses the keys() method of the dictionary to iterate over the keys.
Looping over values: This method uses the values() method of the dictionary to iterate over the values.
Looping over both keys and values: This method uses the items() method of the dictionary to iterate over the key-value pairs.

Coding problems
Q76. Write a Python program to find the factorial of a given number.
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n = 5
print("The factorial of", n, "is", factorial(n))

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100
def calculate_simple_interest(principal, rate, time):
    interest = (principal * rate * time) / 100
    return interest
principal = 1000.0
rate = 5.0
time = 2.0
interest = calculate_simple_interest(principal, rate, time)
print("Principal Amount = ", principal)
print("Interest Rate = ", rate, "%")
print("Time Period = ", time, "years")
print("Simple Interest = ", interest)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
def compound_interest(principal, rate, time, n):
    amount = principal * (1 + (rate / n)) ** (n * time)
    interest = amount - principal
    return interest
principal = 1000
rate = 0.05 
time = 5 
n = 12 
interest = compound_interest(principal, rate, time, n)
print("Compound interest:", round(interest, 2))

Q79. Write a Python program to check if a number is prime or not.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
num = 17
if is_prime(num):
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")
    
Q80. Write a Python program to check Armstrong Number.
def is_armstrong(n):
    num_str = str(n)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == n
num = 153
if is_armstrong(num):
    print(num, "is an Armstrong number")
else:
    print(num, "is not an Armstrong number")
   
Q81. Write a Python program to find the n-th Fibonacci Number.
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
n = 7
fib = fibonacci(n)
print("The", n, "th Fibonacci number is:", fib)

Q82. Write a Python program to interchange the first and last element in a list.
def interchange_first_last(list):
    if len(list) >= 2:
        list[0], list[-1] = list[-1], list[0]
my_list = [1, 2, 3, 4, 5]
print("Original list:", my_list)
interchange_first_last(my_list)
print("List with first and last elements interchanged:", my_list)

Q83. Write a Python program to swap two elements in a list.
def swap_elements(list, i, j):
    if i >= 0 and i < len(list) and j >= 0 and j < len(list):
        list[i], list[j] = list[j], list[i]
my_list = [1, 2, 3, 4, 5]
print("Original list:", my_list)
swap_elements(my_list, 1, 3)
print("List with elements at indices 1 and 3 swapped:", my_list)

Q84. Write a Python program to find N largest element from a list.
def find_n_largest_elements(list, n):
    sorted_list = sorted(list, reverse=True)
    return sorted_list[:n]
my_list = [1, 5, 2, 6, 3, 7, 4, 8]
n = 3
n_largest_elements = find_n_largest_elements(my_list, n)
print(f"The {n} largest elements in the list are:", n_largest_elements)

Q85. Write a Python program to find cumulative sum of a list.
def cumulative_sum(list):
    cum_sum = []
    running_sum = 0
    for elem in list:
        running_sum += elem
        cum_sum.append(running_sum)
    return cum_sum
my_list = [1, 2, 3, 4, 5]
cumulative_sums = cumulative_sum(my_list)
print("Cumulative sums:", cumulative_sums)

Q86. Write a Python program to check if a string is palindrome or not.
def is_palindrome(string):
    string = ''.join(c for c in string.lower() if c.isalnum())
    reversed_string = string[::-1]
    if string == reversed_string:
        return True
    else:
        return False
my_string = "A man, a plan, a canal: Panama"
if is_palindrome(my_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")
    
Q87. Write a Python program to remove i'th element from a string.
def remove_ith_element(string, i):
    string_list = list(string)
    del string_list[i-1]
    new_string = ''.join(string_list)
    return new_string
my_string = "Hello, World!"
i = 7
new_string = remove_ith_element(my_string, i)
print("Original string:", my_string)
print("New string:", new_string)

Q88. Write a Python program to check if a substring is present in a given string.
def is_substring(string, substring):
    if substring in string:
        return True
    else:
        return False
my_string = "Hello, World!"
my_substring = "World"
if is_substring(my_string, my_substring):
    print(my_substring, "is a substring of", my_string)
else:
    print(my_substring, "is not a substring of", my_string)
    
Q89. Write a Python program to find words which are greater than given length k.
def find_long_words(words, k):
    long_words = []
    for word in words:
        if len(word) > k:
            long_words.append(word)
    return long_words
my_words = ["apple", "banana", "orange", "pear", "kiwi", "mango"]
k = 5
long_words = find_long_words(my_words, k)
print("Words greater than length", k, "are:", long_words)

Q90. Write a Python program to extract unique dictionary values.
my_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value1', 'key4': 'value3'}
unique_values = set(my_dict.values())
print("Unique values in the dictionary are:", unique_values)
