Q1. Why do we call Python as a general purpose and high-level programming language?
A1. Since, we can use it in several areas such as in data science, artificial intelligence, machine learning, web development, etc we call it as a general purpose and it is a human readable programming language i.e. high-level programming language.

Q2. Why is Python called a dynamically typed language?
A2. The Python interpreter does type checking only as code runs, and the type of a variable is allowed to change over its lifetime. Therefore, we call it as dynamically typed language.

Q3. List some pros and cons of Python programming language?
A3. Pros - 
	Easy to read, learn and code
	Dynamic Typing
	Free, Open Source
	Portable(platform-independent)
	Extensive Third-Party Libraries(NumPy, Pandas, Tkinter, Django, etc)
	Cons - 
	Slow Speed and Memory Inefficient
	Weak Mobile Computation
	Runtime Errors due to dynamic typing
	It does not allow multithreading
	Poor Database Access
	
Q4. In what all domains can we use Python?
A4.	Several domains like data science, artificial intelligence, machine learning, web development, IOT, etc. we can use Python.

Q5. What are variable and how can we declare them?
A5. Variables are like containers which are required to store any value and as the name suggests it can vary i.e. it's dynamic in nature. 
	Ex -> a = 9 
		  b = "Prashant"	

Q6. How can we take an input from the user in Python?
A6. With the help of input() function. Ex -> x = input()

Q7. What is the default datatype of the value that has been taken as an input using input() function?
A7.	By default it would be taking blank only.
	
Q8. What is type casting?
A8. To change the data type of a variable.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
A9.	Only with input() function we can take single input at a time. But we can use split() function along with input function for multiple inputs.

Q10. What are keywords?
A10. Keywords are reserved words that cannot be used as variable names, function names, or any other identifiers.
	
Q11. Can we use keywords as a variable? Support your answer with reason.
A11. No, because its in-built reserved words that python interpreter will recognize as those keywords only, so it will throw an error whenever we use keywords as variable. Ex -> and = 7 # it will throw an error as 'and' is a reserverd keyword in python.
 
Q12. What is indentation? What's the use of indentaion in Python?
A12. Indentation is basically a tab space. We use it in python to define and differntiate certain block of code like for conditional, loops, functions, etc we use it so that when its executed they only follow the property of that particular block.

Q13. How can we throw some output in Python?
A13. We can use print() and return() functions to throw some output.

Q14. What are operators in Python?
A14. Operators are used to perform operations on variables and values.
Python divides the operators in the following groups:
Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Identity operators
Membership operators
Bitwise operators

Q15. What is difference between / and // operators?
A15. / will give the exact value i.e even in float and // will give the int value without any decimal points.

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
A16. for i in range (1,5):
		print("iNeuron",end='')

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
A17. x = int(input("Enter a number: "))
	if x%2 == 0:
		print("Even")
	else:
		print("odd")

Q18. What are boolean operator?
A18. True & False are boolean operators(gets when two value are being compared)

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
A19. 1 or 0 -> 1

	0 and 0 -> 0

	True and False and True -> False

	1 or 0 or 0 -> 1

Q20. What are conditional statements in Python?
A20. 'if' 'elif' 'else' are conditional statements which are used to check certain conditions and execute the satisfactory result.

Q21. What is use of 'if', 'elif' and 'else' keywords?
A21. 'if' -> If the condition is true in this block result will be printed of this block, 'elif' -> when 'if' condition is not ture this block is checked and 'else' -> when both above blocks are not satisfied, this block gets executed.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
A22. age = int(input("Enter your age: "))
	 if age >=18:
		print("I can vote.")
	 else:
		print("I can't vote.")
Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
A23. sum = 0
	 numbers = [12, 75, 150, 180, 145, 525, 50]
	 for i in numbers:
		if i%2 == 0:
			sum=sum+i
	 print(sum)


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
A24. a,b,c = input("Enter three numbers").split()
if a>b and a>c:
    print(a)
elif b>a and b>c:
        print(b)
else:
    print(c)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
A25.
numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if i%5 == 0:
        if i>500:
            break
        elif i>150:
            continue
        print(i)
        
        
Q26. What is a string? How can we declare string in Python?
Strings are Kind of arrays which are declared in single doubleor tripple quotes. Ex -> a = 'Prashant Goel'

Q27. How can we access the string using its index?
By specifying the index number in square brackets. Ex -> print(a[1]) ----> This will give output 'r'

Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "iNeuron"

print(string[-7:])

Q29. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"

print(string[:-8:-1])

Q30. Resverse the string given in the above question.
print(string[::-1])

Q31. How can you delete entire string at once?
Using del keyword. Ex -> del string

Q32. What is escape sequence?
An escape sequence is a sequence of characters that, when used inside a character or string, does not represent itself but is converted into another character or series of characters.  Ex-> print('Who's this?') will give syntax error so we can use --> print('Who\'s this?')

Q33. How can you print the below string?

'iNeuron's Big Data Course'

print('iNeuron\'s Big Data Course')

Q34. What is a list in Python?
Lists are used to store multiple items in a single variable. 

Q35. How can you create a list in Python?
These are created using square brackets. 
Ex -> list1 = ["Prashant","Shashank","Vishal"]
list2 = [1,2,3]

Q36. How can we access the elements in a list?
We can access them by referring to the index number.
Ex -> print(list1[1])

Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])

Q38. Take a list as an input from the user and find the length of the list.
lst = []
n = int(input("Enter number of elements : "))
for i in range(0, n):
    ele = int(input())
    lst.append(ele)
print(len(lst))

Q39. Add the word "Big" in the 3rd index of the given list.

lst = ["Welcome", "to", "Data", "course"]
lst.insert(2,"Big")

Q40. What is a tuple? How is it different from list?
Tuples are also used to store multiple items in a single variable but it is not mutable wheras lists are mutable.

Q41. How can you create a tuple in Python?
Tuples are written with round brackets.
Ex-> tpl = ("Prashant","Shashank","Vishal")

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
Not possible since it is a property of tuple that it is not mutable.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
Yes. ex-> 
tp1=(1,2) 
tp2=(3,4)
tp3=tp1+tp2

Q44. Take a tuple as an input and print the count of elements in it.
tpl4 = tuple(input("Enter : ").split())
leng = len(tpl4)
print(leng)

Q45. What are sets in Python?
A set is a collection which is unordered, unchangeable*, and unindexed.

Q46. How can you create a set?
Sets are written with curly brackets.
set1 = {"Prashant","Shashank","Vishal"}

Q47. Create a set and add "iNeuron" in your set.
set1.add("iNeuron")

Q48. Try to add multiple values using add() function.
Gave error.

Q49. How is update() different from add()?
To add items from another set into the current set, we use the update() method.

Q50. What is clear() in sets?
The clear() method empties the set.

Q51. What is frozen set?
It creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.

Q52. How is frozen set different from set?
Set is mutable and hashable whereas Frozenset is not.And there are very limited functions we can use with frozenset.

Q53. What is union() in sets? Explain via code.
Union of two given sets is the set which contains all the elements of both the sets.
Ex -> 
A = {2, 4, 5, 6}
B = {4, 6, 7, 8}
print("A U B:", A.union(B))

Q54. What is intersection() in sets? Explain via code.
The intersection of two given sets is the largest set, which contains all the elements that are common to both sets.
Ex->
s1 = {1, 2, 3}
s2 = {2, 3}
print(s1.intersection(s2))

Q55. What is dictionary ibn Python?
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered, changeable and do not allow duplicates.
Dictionaries are written with curly brackets.

Q56. How is dictionary different from all other data structures.
It stores values in key:value pairs which no other data structure in python does.

Q57. How can we delare a dictionary in Python?
We can create a dictionary using the dict() function.

Q58. What will the output of the following?
var = {}
print(type(var))

class 'dict'

Q59. How can we add an element in a dictionary?
tdict["car"] = "Aventador"
This will add key as car and its value as Urus in an existing dictionary 'dict'.

Q60. Create a dictionary and access all the values in that dictionary.
dict1 = {
  "brand": "Lamborghini",
  "model": "Urus",
  "year": 2020
}
print(dict1)

Q61. Create a nested dictionary and access all the element in the inner dictionary.
dict1 = {
  "brand": "Lamborghini",
  "model": "Urus",
  "year": 2020,
  "dict2" : {"Name":"Prashant","age":23}
}

print(dict1["dict2"])


Q62. What is the use of get() function?
The get() method returns the value of the item with the specified key.

Q63. What is the use of items() function?
The items() method returns a view object. The view object contains the key-value pairs of the dictionary, as tuples in a list.
The view object will reflect any changes done to the dictionary.

Q64. What is the use of pop() function?
The pop() method removes the item with the specified key name.

Q65. What is the use of popitems() function?
The popitem() method removes the last inserted item.

Q66. What is the use of keys() function?
The keys() method will return a list of all the keys in the dictionary.

Q67. What is the use of values() function?
The values() method will return a list of all the values in the dictionary.

Q68. What are loops in Python?
Loop statements allows us to execute a statement or group of statements multiple times.

Q69. How many type of loop are there in Python?
for loop and while loop

Q70. What is the difference between for and while loops?
For loop allows a programmer to execute a sequence of statements several times, it abbreviates the code which helps to manage loop variables.
While loop allows a programmer to repeat a single statement or a group of statements for the TRUE condition. It verifies the condition before executing the loop.

Q71. What is the use of continue statement?
The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.

Q72. What is the use of break statement?
'Break' in Python is a loop control statement. It is used to control the sequence of the loop. Suppose we want to terminate a loop and skip to the next code after the loop, break will help us do that.

Q73. What is the use of pass statement?
The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but we avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

Q74. What is the use of range() function?
The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.
Syntax -> range(start, stop, step)

Q75. How can you loop over a dictionary?
In Python, we can loop over a dictionary using a for loop. There are several ways to do this, but the most common approaches are:
Looping over keys: This method uses the keys() method of the dictionary to iterate over the keys.
Looping over values: This method uses the values() method of the dictionary to iterate over the values.
Looping over both keys and values: This method uses the items() method of the dictionary to iterate over the key-value pairs.

Coding problems
Q76. Write a Python program to find the factorial of a given number.
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n = 5
print("The factorial of", n, "is", factorial(n))

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100
def calculate_simple_interest(principal, rate, time):
    interest = (principal * rate * time) / 100
    return interest
principal = 1000.0
rate = 5.0
time = 2.0
interest = calculate_simple_interest(principal, rate, time)
print("Principal Amount = ", principal)
print("Interest Rate = ", rate, "%")
print("Time Period = ", time, "years")
print("Simple Interest = ", interest)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
def compound_interest(principal, rate, time, n):
    amount = principal * (1 + (rate / n)) ** (n * time)
    interest = amount - principal
    return interest
principal = 1000
rate = 0.05 
time = 5 
n = 12 
interest = compound_interest(principal, rate, time, n)
print("Compound interest:", round(interest, 2))

Q79. Write a Python program to check if a number is prime or not.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
num = 17
if is_prime(num):
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")
    
Q80. Write a Python program to check Armstrong Number.
def is_armstrong(n):
    num_str = str(n)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == n
num = 153
if is_armstrong(num):
    print(num, "is an Armstrong number")
else:
    print(num, "is not an Armstrong number")
   
Q81. Write a Python program to find the n-th Fibonacci Number.
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
n = 7
fib = fibonacci(n)
print("The", n, "th Fibonacci number is:", fib)

Q82. Write a Python program to interchange the first and last element in a list.
def interchange_first_last(list):
    if len(list) >= 2:
        list[0], list[-1] = list[-1], list[0]
my_list = [1, 2, 3, 4, 5]
print("Original list:", my_list)
interchange_first_last(my_list)
print("List with first and last elements interchanged:", my_list)

Q83. Write a Python program to swap two elements in a list.
def swap_elements(list, i, j):
    if i >= 0 and i < len(list) and j >= 0 and j < len(list):
        list[i], list[j] = list[j], list[i]
my_list = [1, 2, 3, 4, 5]
print("Original list:", my_list)
swap_elements(my_list, 1, 3)
print("List with elements at indices 1 and 3 swapped:", my_list)

Q84. Write a Python program to find N largest element from a list.
def find_n_largest_elements(list, n):
    sorted_list = sorted(list, reverse=True)
    return sorted_list[:n]
my_list = [1, 5, 2, 6, 3, 7, 4, 8]
n = 3
n_largest_elements = find_n_largest_elements(my_list, n)
print(f"The {n} largest elements in the list are:", n_largest_elements)

Q85. Write a Python program to find cumulative sum of a list.
def cumulative_sum(list):
    cum_sum = []
    running_sum = 0
    for elem in list:
        running_sum += elem
        cum_sum.append(running_sum)
    return cum_sum
my_list = [1, 2, 3, 4, 5]
cumulative_sums = cumulative_sum(my_list)
print("Cumulative sums:", cumulative_sums)

Q86. Write a Python program to check if a string is palindrome or not.
def is_palindrome(string):
    string = ''.join(c for c in string.lower() if c.isalnum())
    reversed_string = string[::-1]
    if string == reversed_string:
        return True
    else:
        return False
my_string = "A man, a plan, a canal: Panama"
if is_palindrome(my_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")
    
Q87. Write a Python program to remove i'th element from a string.
def remove_ith_element(string, i):
    string_list = list(string)
    del string_list[i-1]
    new_string = ''.join(string_list)
    return new_string
my_string = "Hello, World!"
i = 7
new_string = remove_ith_element(my_string, i)
print("Original string:", my_string)
print("New string:", new_string)

Q88. Write a Python program to check if a substring is present in a given string.
def is_substring(string, substring):
    if substring in string:
        return True
    else:
        return False
my_string = "Hello, World!"
my_substring = "World"
if is_substring(my_string, my_substring):
    print(my_substring, "is a substring of", my_string)
else:
    print(my_substring, "is not a substring of", my_string)
    
Q89. Write a Python program to find words which are greater than given length k.
def find_long_words(words, k):
    long_words = []
    for word in words:
        if len(word) > k:
            long_words.append(word)
    return long_words
my_words = ["apple", "banana", "orange", "pear", "kiwi", "mango"]
k = 5
long_words = find_long_words(my_words, k)
print("Words greater than length", k, "are:", long_words)

Q90. Write a Python program to extract unique dictionary values.
my_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value1', 'key4': 'value3'}
unique_values = set(my_dict.values())
print("Unique values in the dictionary are:", unique_values)

Q91. Write a Python program to merge two dictionary.
dict1 = {'key1': 'value1', 'key2': 'value2'}
dict2 = {'key3': 'value3', 'key4': 'value4'}
dict1.update(dict2)
print("Merged dictionary is:", dict1)

Q92. Write a Python program to convert a list of tuples into dictionary.
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

input_list = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
output_dict = {k: v for k, v in input_list}
print(output_dict)


Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]


def get_number_and_cube_tuples(input_list):
    result = []
    for number in input_list:
        cube = number ** 3
        result.append((number, cube))
    return result
input_list = [9, 5, 6]
output_list = get_number_and_cube_tuples(input_list)
print(output_list)



Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
from itertools import product
def get_tuple_combinations(tuple1, tuple2):
    return list(product(tuple1, tuple2))
test_tuple1 = (7, 2)
test_tuple2 = (7, 8)
result = get_tuple_combinations(test_tuple1, test_tuple2)
print(result)


Q95. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]

def sort_tuples_by_second_item(tuple_list):
    return sorted(tuple_list, key=lambda x: x[1])
input_list = [('for', 24), ('Geeks', 8), ('Geeks', 30)]
output_list = sort_tuples_by_second_item(input_list)
print(output_list)


Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 

def print_pattern(n):
    for i in range(n):
        for j in range(i + 1):
            print("*", end=" ")
        print()
print_pattern(5)


Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****

def print_pattern(n):
    for i in range(n):
        for j in range(n - i - 1):
            print(" ", end="")
        for j in range(i + 1):
            print("*", end="")
        print()
print_pattern(5)


Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
def print_pattern(n):
    for i in range(n):
        for j in range(n - i - 1):
            print(" ", end="")
        for j in range(i + 1):
            print("* ", end="")
        print()
print_pattern(5)

Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

def print_pattern(n):
    for i in range(n):
        for j in range(i + 1):
            print(j + 1, end=" ")
        print()
print_pattern(5)

Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 

def print_pattern(n):
    for i in range(n):
        for j in range(i + 1):
            print(chr(65 + i), end=" ")
        print()
print_pattern(5)
